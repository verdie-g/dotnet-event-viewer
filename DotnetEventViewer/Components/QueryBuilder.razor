@using System.Text.RegularExpressions
@using DotnetEventViewer.CallTree.CountAggregators
@using DotnetEventViewer.Models
@using DotnetEventViewer.Querying
@using DotnetEventViewer.Querying.Operators
@using DotnetEventViewer.State
@using EventPipe

@inject StateContainer State

<EditForm EditContext="_editContext" OnValidSubmit="@HandleValidSubmit" FormName="query-builder" novalidate>
    <FluentStack Orientation="Orientation.Vertical">

        <FluentAutocomplete TOption="EventKey"
                            AutoComplete="off"
                            Placeholder="Select event names"
                            OnOptionsSearch="@OnEventKeySearch"
                            MaximumSelectedOptions="3"
                            OptionText="k => k.EventName"
                            @bind-SelectedOptions:get="Query.EventKeys"
                            @bind-SelectedOptions:set="(IEnumerable<EventKey>? k) => Query.EventKeys = k!.ToArray()"
                            Width="521px" />

        @for (int i = 0; i < Query.Filters.Length; i += 1)
        {
            int idx = i;
            <div>
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentCombobox TOption="Field"
                                    Width="200px"
                                    Placeholder="Select the field to filter on"
                                    Items="GetFields(Query.Filters[idx])"
                                    Autocomplete="ComboboxAutocomplete.Both"
                                    OptionText="@(f => f.Name)"
                                    @bind-SelectedOption="Query.Filters[idx].Field"
                                    Required/>
                    <FluentSelect TOption="IOperator"
                                  Width="80px"
                                  Items="AllOperators"
                                  OptionText="@(o => o.Text)"
                                  @bind-SelectedOption="Query.Filters[idx].Operator"/>
                    <FluentTextField @bind-Value="Query.Filters[idx].Value"
                                     Minlength="1"
                                     Required/>
                    <FluentButton Title="Remove filter"
                                  IconStart="@(new Icons.Regular.Size24.Dismiss())"
                                  OnClick="_ => OnRemoveFilter(idx)"/>
                </FluentStack>
                <FluentValidationMessage For="() => Query.Filters[idx]"/>
            </div>
        }

        <FluentStack Orientation="Orientation.Horizontal">
            <FluentButton OnClick="@OnAddFilter"
                          IconStart="@(new Icons.Regular.Size24.Add())">
                Add Filter
            </FluentButton>
            @if (QueryType == QueryType.List)
            {
                <FluentAutocomplete TOption="Field"
                                    Width="500px"
                                    AutoComplete="off"
                                    Placeholder="Select column"
                                    OnOptionsSearch="@OnColumnFieldSearch"
                                    MaximumSelectedOptions="6"
                                    OptionText="@(f => f.Name)"
                                    @bind-SelectedOptions="Query.SelectedColumnFields"/>
            }
            else if (QueryType == QueryType.Tree)
            {
                <FluentSelect TOption="ICallTreeCountAggregator"
                              Items="AllAggregators"
                              OptionText="@(d => d.Name)"
                              OptionDisabled="IsAggregatorDisabled"
                              @bind-SelectedOption="Query.SelectedAggregator"/>
                <FluentButton
                    id="extra-options"
                    Appearance="Appearance.Neutral"
                    @onclick="() => _extraOptionsOpen = !_extraOptionsOpen"
                    IconStart="@(new Icons.Filled.Size20.Settings())">
                </FluentButton>
                <FluentPopover AnchorId="extra-options" @bind-Open="_extraOptionsOpen">
                    <Body>
                        <FluentMenuItem
                            Role="MenuItemRole.MenuItemCheckbox"
                            Checked="@Query.BottomUpTree"
                            OnClick="() => Query.BottomUpTree = !Query.BottomUpTree">
                            Bottom-up Tree
                        </FluentMenuItem>
                        <FluentMenuItem
                            Role="MenuItemRole.MenuItemCheckbox"
                            Checked="@Query.ThreadPoolStacksOnly"
                            OnClick="() => Query.ThreadPoolStacksOnly = !Query.ThreadPoolStacksOnly">
                            Thread Pool Stacks Only
                        </FluentMenuItem>
                    </Body>
                </FluentPopover>
            }
            <FluentButton Type="ButtonType.Submit"
                          Appearance="Appearance.Accent"
                          IconStart="@(new Icons.Regular.Size24.ArrowSync())">
                Run query
            </FluentButton>
        </FluentStack>
    </FluentStack>
</EditForm>

@code
{
    private static readonly IOperator[] AllOperators =
    [
        EqualOperator.Instance,
        NotEqualOperator.Instance,
        LessOperator.Instance,
        LessOrEqualOperator.Instance,
        GreaterOperator.Instance,
        GreaterOrEqualOperator.Instance,
        MatchOperator.Instance,
        NotMatchOperator.Instance,
    ];

    private static readonly Field[] DefaultColumnFields =
    [
        Field.TimeStampField,
        Field.ThreadIdField,
        Field.EventNameField,
    ];

    private static readonly ICallTreeCountAggregator[] AllAggregators =
    [
        EventsCountAggregator.Instance,
        AllocationSizeAggregator.Instance,
        WaitHandleWaitDurationAggregator.Instance,
        ContentionDurationAggregator.Instance,
    ];

    private Field[] _allFields = [];
    private EditContext _editContext = default!;
    private ValidationMessageStore _messageStore = default!;
    private bool _extraOptionsOpen;

    [Parameter, EditorRequired]
    public QueryType QueryType { get; set; }

    [Parameter]
    public EventCallback<QueryResult> OnQuery { get; set; }

    [SupplyParameterFromForm]
    private Query Query { get; set; } = default!;

    protected override void OnInitialized()
    {
        _allFields = Field.StaticEventField
            .Concat(EnumerateDynamicFieldSelectors(State.Trace!))
            .OrderBy(s => s.Name)
            .ToArray();
        Query = State.Query!;
        Query.SelectedColumnFields ??= DefaultColumnFields;
        Query.SelectedAggregator ??= EventsCountAggregator.Instance;
        _editContext = new EditContext(Query);
        _editContext.OnValidationRequested += OnValidationRequested;
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private IEnumerable<Field> EnumerateDynamicFieldSelectors(Trace trace)
    {
        return trace.EventMetadata
            .SelectMany(m => m.FieldDefinitions.Select(d => Field.FromPayloadFieldDefinition(d, m)))
            .DistinctBy(s => s.Name);
    }

    private void OnAddFilter()
    {
        var newFilters = new Filter[Query.Filters.Length + 1];
        Array.Copy(Query.Filters, newFilters, Query.Filters.Length);
        newFilters[^1] = new Filter(Field.ThreadIdField, EqualOperator.Instance, "");
        Query.Filters = newFilters;
    }

    private void OnRemoveFilter(int idx)
    {
        var newFilters = new Filter[Query.Filters.Length - 1];
        Array.Copy(Query.Filters, newFilters, newFilters.Length);
        Query.Filters = newFilters;
    }

    private void OnEventKeySearch(OptionsSearchEventArgs<EventKey> e)
    {
        e.Items = State.Trace!.EventMetadata
            .Select(EventKey.From)
            .Distinct() // Group events with different versions together.
            .Where(m => m.EventName.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
    }

    private IEnumerable<Field> GetFields(Filter forFilter)
    {
        if (Query.EventKeys.Length == 0)
        {
            return _allFields;
        }

        return _allFields.Where(f => f.AssociatedEventMetadata == null
            || Query.EventKeys.Any(k => k.Matches(f.AssociatedEventMetadata))).ToArray();
    }

    private void OnColumnFieldSearch(OptionsSearchEventArgs<Field> e)
    {
        if (Query.EventKeys.Length == 0)
        {
            e.Items = _allFields.Where(f => f.Name.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
        }
        else
        {
            e.Items = _allFields.Where(f =>
                (f.AssociatedEventMetadata == null || Query.EventKeys.Any(k => k.Matches(f.AssociatedEventMetadata)))
                && f.Name.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
        }
    }

    private bool IsAggregatorDisabled(ICallTreeCountAggregator aggregator)
    {
        if (aggregator.StartEventKey == null)
        {
            return false;
        }

        if (Query.EventKeys.Length == 0)
        {
            return true;
        }

        if (Query.EventKeys.Contains(aggregator.StartEventKey))
        {
            return false;
        }

        return aggregator.StopEventKey == null || !Query.EventKeys.Contains(aggregator.StopEventKey);
    }

    private void OnValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _messageStore.Clear();

        for (int i = 0; i < Query.Filters.Length; i += 1)
        {
            int idx = i;
            var filter = Query.Filters[idx];

            if (!filter.Operator.IsCompatible(filter.Field.Type))
            {
                _messageStore.Add(() => Query.Filters[idx], $"Operator {filter.Operator.Text} is not compatible with this field.");
            }

            if (filter.Operator is MatchOperator or NotMatchOperator)
            {
                try
                {
                    filter.ParsedValue = new Regex(filter.Value);
                }
                catch
                {
                    _messageStore.Add(() => Query.Filters[idx], $"\"{filter.Value}\" is not a valid regex.");
                }
            }
            else if (TryParseFilterValue(filter.Field.Type, filter.Value, out object parsedValue))
            {
                filter.ParsedValue = parsedValue;
            }
            else
            {
                _messageStore.Add(() => Query.Filters[idx], $"\"{filter.Value}\" is not a valid {filter.Field.Type}.");
            }
        }
    }

    private bool TryParseFilterValue(TypeCode fieldType, string value, out object parsedValue)
    {
        bool ok;
        switch (fieldType)
        {
            case TypeCode.Boolean when value == "0":
                ok = true;
                parsedValue = false;
                break;
            case TypeCode.Boolean when value == "1":
                ok = true;
                parsedValue = true;
                break;
            case TypeCodeExtensions.Guid:
                ok = Guid.TryParse(value, out Guid guidValue);
                parsedValue = guidValue;
                break;
            default:
                try
                {
                    parsedValue = Convert.ChangeType(value, fieldType);
                    ok = true;
                }
                catch
                {
                    parsedValue = "";
                    ok = false;
                }
                break;
        }

        return ok;

    }

    // Automatically append aggregator start/stop events, so it has all the needed data for its computation.
    private EventKey[] BuildEventKeysFilter(Query query)
    {
        IEnumerable<EventKey> eventKeys = query.EventKeys;

        if (Query.SelectedAggregator?.StartEventKey != null)
        {
            eventKeys = eventKeys.Append(Query.SelectedAggregator.StartEventKey);
        }

        if (Query.SelectedAggregator?.StopEventKey != null)
        {
            eventKeys = eventKeys.Append(Query.SelectedAggregator.StopEventKey);
        }

        return eventKeys.ToArray();
    }

    private void HandleValidSubmit()
    {
        var eventKeys = BuildEventKeysFilter(Query);

        IReadOnlyList<Event> filteredEvents;
        if (Query.EventKeys.Length == 0 && Query.Filters.Length == 0)
        {
            filteredEvents = State.Trace!.Events;
        }
        else
        {
            filteredEvents = State.Trace!.Events
                .Where(evt => FilterEvent(evt, Query, eventKeys))
                .ToArray();
        }

        _ = OnQuery.InvokeAsync(new QueryResult(filteredEvents, Query.SelectedColumnFields, Query.SelectedAggregator, Query.BottomUpTree));
    }

    private bool FilterEvent(Event evt, Query query, EventKey[] eventKeys)
    {
        if (eventKeys.Length != 0 && eventKeys.All(k => !k.Matches(evt)))
        {
            return false;
        }

        foreach (var filter in query.Filters)
        {
            var operand = filter.Field.Selector(evt);
            if (!filter.Operator.Match(operand, filter.ParsedValue))
            {
                return false;
            }
        }

        if (Query.ThreadPoolStacksOnly)
        {
            var frames = evt.StackTrace.Frames;
            if (frames.Length == 0
                || (frames[^1].Namespace == "System.Threading.Thread" && frames[^1].Name == "StartCallback"))
            {
                return false;
            }
        }

        return true;
    }
}