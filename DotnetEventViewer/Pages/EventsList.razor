@page "/list"

@using DotnetEventViewer.State
@using EventPipe
@using DotnetEventViewer.Components

@inject StateContainer StateContainer

<PageTitle>Events List</PageTitle>

<h1>Events List</h1>

<FluentStack Orientation="Orientation.Horizontal">
    <div>
        <FluentAutocomplete TOption="FieldSelector"
                            AutoComplete="off"
                            Placeholder="Select fields"
                            OnOptionsSearch="@OnFieldSearchAsync"
                            MaximumSelectedOptions="6"
                            OptionText="@(s => s.FieldName)"
                            @bind-SelectedOptions="@_selectedFieldSelectors" />
    </div>
</FluentStack>

<QueryBuilder OnEventsFiltered="OnEventsFiltered" />

<FluentDataGrid
    Items="@_events"
    ItemKey="@(e => e.Index)"
    Virtualize="true"
    ResizableColumns="true"
    ItemSize="32">
    <ChildContent>
        @foreach (var s in _selectedFieldSelectors)
        {
            <PropertyColumn Title="@s.FieldName" Property="@(e => s.Selector(e))" Sortable="true"/>
        }
    </ChildContent>
    <EmptyContent>
        No events.
    </EmptyContent>
</FluentDataGrid>

@code {
    private static readonly FieldSelector[] StaticEventFieldSelectors =
    [
        new FieldSelector(nameof(Event.CaptureThreadId), e => e.CaptureThreadId),
        new FieldSelector(nameof(Event.ThreadId), e => e.ThreadId),
        new FieldSelector(nameof(Event.TimeStamp), e => e.TimeStamp),
        new FieldSelector(nameof(Event.ActivityId), e => e.ActivityId),
        new FieldSelector(nameof(Event.RelatedActivityId), e => e.RelatedActivityId),
        new FieldSelector(nameof(EventMetadata.EventName), e => e.Metadata.EventName),
    ];

    private static readonly string[] DefaultFieldNames =
    [
        nameof(Event.TimeStamp),
        nameof(Event.ThreadId),
        nameof(EventMetadata.EventName)
    ];

    private IQueryable<Event> _events = Enumerable.Empty<Event>().AsQueryable();
    private FieldSelector[] _allFieldSelectors = StaticEventFieldSelectors;
    private IEnumerable<FieldSelector> _selectedFieldSelectors = DefaultFieldNames
        .Select(n => Array.Find(StaticEventFieldSelectors, s => s.FieldName == n)!)
        .ToArray();

    protected override Task OnInitializedAsync()
    {
        if (StateContainer.Trace == null)
        {
            return Task.CompletedTask;
        }

        _allFieldSelectors = StaticEventFieldSelectors.Concat(EnumerateDynamicFieldSelectors(StateContainer.Trace)).ToArray();
        return Task.CompletedTask;
    }

    private Task OnFieldSearchAsync(OptionsSearchEventArgs<FieldSelector> e)
    {
        e.Items = _allFieldSelectors.Where(s => s.FieldName.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase));
        return Task.CompletedTask;
    }

    private IEnumerable<FieldSelector> EnumerateDynamicFieldSelectors(Trace trace)
    {
        return trace.EventMetadata
            .SelectMany(m => m.FieldDefinitions
                .Select(f => FieldSelector.FromPayloadFieldName(f.Name)));
    }

    private void OnEventsFiltered(IReadOnlyList<Event> events)
    {
        _events = events.AsQueryable();
    }

    private class FieldSelector(string fieldName, Func<Event, object> selector)
    {
        public static FieldSelector FromPayloadFieldName(string fieldName)
        {
            return new FieldSelector(
                fieldName,
                e => e.Payload.GetValueOrDefault(fieldName, ""));
        }

        public string FieldName { get; } = fieldName;
        public Func<Event, object> Selector { get; } = selector;
    }
}