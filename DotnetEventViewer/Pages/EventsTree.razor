@page "/tree"

@using DotnetEventViewer.State
@using DotnetEventViewer.Models

@inject StateContainer StateContainer

<PageTitle>Events Tree</PageTitle>

<h1>Events Tree</h1>

<FluentTreeView RenderCollapsedNodes="true">
    @RenderCallTreeNode(_callTree)
</FluentTreeView>

@code {
    private CallTreeNode _callTree = default!;

    protected override Task OnInitializedAsync()
    {
        if (StateContainer.Trace == null)
        {
            return Task.CompletedTask;
        }

        _callTree = CallTreeNode.Create(StateContainer.Trace.StackTraces);
        return Task.CompletedTask;
    }

    private static RenderFragment RenderCallTreeNode(CallTreeNode node)
    {
        return builder =>
        {
            builder.OpenComponent<FluentTreeItem>(0);
            builder.AddAttribute(1, "Text", node.MethodDescription.ToString());
            if (node.Children != null)
            {
                builder.AddAttribute(2, "ChildContent", (RenderFragment)(b =>
                {
                    foreach (var child in node.Children)
                    {
                        RenderCallTreeNode(child.Value)(b);
                    }
                }));
            }

            builder.CloseComponent();
        };
    }
}