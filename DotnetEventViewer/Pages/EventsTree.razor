@page "/tree"

@using DotnetEventViewer.CallTree
@using DotnetEventViewer.CallTree.Decorators
@using DotnetEventViewer.State
@using DotnetEventViewer.Components
@using EventPipe

@inject StateContainer State

<PageTitle>Events Tree</PageTitle>

<h1>Events Tree</h1>

<QueryBuilder OnEventsFiltered="OnEventsFiltered" />

@if (_callTree != null)
{
    <FluentTreeView>
        @RenderCallTreeNode(_callTree, _callTreeDecorator)
    </FluentTreeView>
}

@code {
    private CallTreeNode? _callTree;
    private ICallTreeNodeDecorator _callTreeDecorator = default!;

    protected override Task OnInitializedAsync()
    {
        if (State.Trace == null)
        {
            return Task.CompletedTask;
        }

        _callTreeDecorator = new EventsCountDecorator();
        return Task.CompletedTask;
    }

    private void OnEventsFiltered(IReadOnlyList<Event> evts)
    {
        _callTree = CallTreeNode.Create(evts, _callTreeDecorator);
    }

    private static RenderFragment RenderCallTreeNode(CallTreeNode root, ICallTreeNodeDecorator decorator)
    {
        return RenderCallTreeNode(root, root, null, decorator);
    }

    private static RenderFragment RenderCallTreeNode(
        CallTreeNode root,
        CallTreeNode node,
        CallTreeNode? parent,
        ICallTreeNodeDecorator decorator)
    {
        return builder =>
        {
            builder.OpenComponent<FluentTreeItem>(0);
            builder.AddAttribute(1, nameof(FluentTreeItem.Text), GenerateNodeText(root, node, decorator));

            if (node.Children != null)
            {
                if (parent?.Children is { Count: 1 })
                {
                    builder.AddAttribute(2, nameof(FluentTreeItem.InitiallyExpanded), true);
                }

                builder.AddAttribute(3, nameof(FluentTreeItem.ChildContent), (RenderFragment)(b =>
                {
                    foreach (var child in node.Children.Values.OrderByDescending(n => n.Count))
                    {
                        RenderCallTreeNode(root, child, node, decorator)(b);
                    }
                }));
            }

            builder.CloseComponent();
        };
    }

    private static string GenerateNodeText(CallTreeNode root, CallTreeNode node, ICallTreeNodeDecorator decorator)
    {
        float ratio = node.Count / (float)root.Count;
        return $"({100 * ratio:0.00}% - {node.Count.ToString(decorator.Format)} {decorator.Unit}) {node.MethodDescription}";
    }
}